module Health (
		input EnemyAttack, PlayerAttack, Reset
		input Clk,frame_clk,
		input [7:0] EnemyX, EnemyY, PlayerX, PlayerY,
		
		output logic [2:0] PlayerHealth, EnemyHealth
);
		
	 logic frame_clk_delayed, frame_clk_rising_edge;
    always_ff @ (posedge Clk) begin
			if(Reset)
			begin
				PlayerHealth <= 3'd6;
				EnemyHealth <= 3'd6;
			end
      frame_clk_delayed <= frame_clk;
      frame_clk_rising_edge <= (frame_clk == 1'b1) && (frame_clk_delayed == 1'b0);
    end
	
	
	logic [1:0] EnemyCount, PlayerCount;
	
	
	always_ff @ (posedge frame_clk_rising_edge)
	begin
		if(EnemyAttack)
			EnemyCount <= (EnemyCount+1)%4;
		else
			EnemyCount <= 2'b0;
			
		if(PlayerAttack)
			PlayerCount <= (PlayerCount+1)%4;
		else
			PlayerCount <= 2'b0;
	end

	int DistX, DistY, AttackSize;
	logic [7:0] PlayerCX, PlayerCY, EnemyCX, EnemyCY;
	logic attackHit;
	
	assign PlayerCX = PlayerX + 8'd4;
	assign PlayerCY = PlayerY + 8'd4;
	assign EnemyCX = EnemyX + 8'd4;
	assign EnemyCY = EnemyY + 8'd4;
	
	assign AttackSize = 12;
	assign DistX = PlayerCX - EnemyCX;
	assign DistY = PlayerCY - EnemyCY;
	
	always_comb
	begin
	
		if (( DistX*DistX + DistY*DistY) <= (AttackSize*AttackSize))
			attackHit = 1'b1;
		else
			attackHit = 1'b0;
		
		if(EnemyCount == 2'd3 && attackHit)
		begin
			playerHealth 
		end
	
		if(PlayerCount == 2'd3)
		begin
		
		end
	
	end

endmodule

